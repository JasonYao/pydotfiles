#!/usr/bin/env bash

# Fails on the first error
set -e

bash_files=(
    start-opinionated start-base
    bin/lint bin/prepare-release
    bin/generate-release bin/install_dependencies
)

schema_root_directory="pydotfiles/resources/schemas"

##
# Pretty output functions
##

function info () {
	printf "\\t  [\\033[00;34mINFO\\033[0m] %s\\n" "${1}"
}

function user () {
	printf "\\t  [ \\033[0;33m??\\033[0m ] %s\\n" "${1}"
}

function success () {
	printf "\\t\\033[2K  [ \\033[00;32mOK\\033[0m ] %s\\n" "${1}"
}

function warn () {
	printf "\\t\\033[2K  [\\033[38:2:255:165:0mWARN\\033[0m] %s\\n" "${1}"
}

function fail () {
	printf "\\t\\033[2K  [\\033[0;31mFAIL\\033[0m] %s\\n" "${1}"
}

# Lints bash
for bash_file in "${bash_files[@]}"; do
    shellcheck "${bash_file}"
done
success "Linting: Bash code conforms to linting standard"

# Lints python
if [[ $(autopep8 --recursive pydotfiles --diff --ignore E501) == "" ]]; then
    success "Linting: Python code conforms to linting standard"
else
    fail "Linting: Python code does not conforms to linting standard"
    autopep8 --recursive pydotfiles --in-place --ignore E501
    exit 1
fi

# Lints JSON

# See https://github.com/koalaman/shellcheck/wiki/SC2044
while IFS= read -r -d '' file
do
    # See https://stackoverflow.com/a/46955018
    if jq -e . >/dev/null 2>&1 <<<"$(cat "${file%}")"; then
        success "JSON Linting: JSON File is successfully linted [file=${file}]"
    else
        fail "JSON Linting: Failed JSON linting [file=${file}]"
        exit 1
    fi
done <   <(find "${schema_root_directory}" -name '*.json' -print0)
